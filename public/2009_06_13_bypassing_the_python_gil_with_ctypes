
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<title>Bypassing the Python GIL with ctypes &mdash; Christopher Swenson</title>
	<link href="main.css" rel="stylesheet" type="text/css" />
	<link href="feed" rel="alternate" title="Primary Feed" type="application/atom+xml" />
	<link href="SyntaxHighlighter.css" rel="stylesheet" type="text/css" />

<script src="js/shCore.js" type="text/javascript"></script>
<!--<script src="js/shBrushCSharp.js" type="text/javascript"></script>
<script src="js/shBrushCpp.js" type="text/javascript"></script>
<script src="js/shBrushCss.js" type="text/javascript"></script>
<script src="js/shBrushDelphi.js" type="text/javascript"></script>
<script src="js/shBrushJScript.js" type="text/javascript"></script>
<script src="js/shBrushJava.js" type="text/javascript"></script>
<script src="js/shBrushPhp.js" type="text/javascript"></script>-->
<script src="js/shBrushRuby.js" type="text/javascript"></script>
<script src="js/shBrushPython.js" type="text/javascript"></script>
<!--<script src="js/shBrushSql.js" type="text/javascript"></script>
<script src="js/shBrushVb.js" type="text/javascript"></script>
<script src="js/shBrushXml.js" type="text/javascript"></script>-->

<script language="javascript">
window.onload = function () {
    dp.SyntaxHighlighter.ClipboardSwf = '/flash/clipboard.swf';
    dp.SyntaxHighlighter.HighlightAll('code');
}
</script>

</head>
<body>
<div id="header">
	<div id="logo">
		<img src="images/chrisbluething.png" alt="blue thing" />
		<h1><a href="/">Christopher Swenson</a></h1>
		<p>Computer science, math, programming, and stuff.</p>
	</div>
</div>
<div id="content">
	<div class="postzoom"><h1><a href="2009_06_13_bypassing_the_python_gil_with_ctypes">Bypassing the Python GIL with ctypes</a></h1>
<p>I recently read an interesting <a href="http://entitycrisis.blogspot.com/2009/06/python-threading-is-fundamentally.html">article</a> (actually, the slides linked to) about the horror that is the Global Interpreter Lock in Python, especially with multicore CPUs.  And I agree — in these cases, the GIL is painful.</p>

<p>My favorite way of bypassing the GIL is to use <a href="http://docs.python.org/library/ctypes.html#finding-shared-libraries">ctypes</a>, a wonderful library that allows you to easily link to dynamic libraries and call the functions from C, with only a small amount of boilerplate (to map function calls, argument types, and return types).</p>

<p>The best feature of <tt>ctypes</tt> is that when a program is executing a ctypes function, it <strong>releases the GIL</strong>.  Meaning that if you have more than one thread threads, and one of them is busy with a <tt>ctypes</tt> call, the other threads can go along their merry way.</p>

<p>In the slides above, he shows that Python CPU-intensive multithreaded applications slow down as the number of CPUs increase.  Well, I decided to use a quick counterexample.</p>

<p>First, I create a C file to do some work for me, called <tt>test.c</tt>:</p>

<pre name="code" class="c">int test(int from, int to)
{
  int i;
  int s = 0;
 
  for (i = from; i < to; i++)
    if (i % 3 == 0)
      s += i;

  return s;
}</pre>

<p>To compile this as a dynamic shared library under OS X, the following two commands can be used:</p>

<pre>gcc -g -fPIC -c -o test.o test.c
ld -dylib -o libtest.dylib test.o</pre>

<p>(Under Linux, replace this last line with <tt>ld -shared -o libtest.so test.o</tt>)</p>

<p>Then, we can use the following Python program to load the dynamic library and run a quick test (should work in Linux or OS X):</p>

<pre name="code" class="python">import ctypes
import ctypes.util
import threading
import time

testname = ctypes.util.find_library('test')
testlib = ctypes.cdll.LoadLibrary(testname)

test = testlib.test
test.argtypes = [ctypes.c_int, ctypes.c_int]

def t():
  test(0, 1000000000)

if __name__ == '__main__':
  start_time = time.time()
  t()
  t()
  print "Sequential run time: %.2f seconds" % (time.time() - start_time)

  start_time = time.time()
  t1 = threading.Thread(target=t)
  t2 = threading.Thread(target=t)
  t1.start()
  t2.start()
  t1.join()
  t2.join()
  print "Parallel run time: %.2f seconds" % (time.time() - start_time)</pre>

<p>On my quad-core OS X box, I get the following output:</p>

<pre>Sequential run time: 13.27 seconds
Parallel run time: 6.66 seconds</pre>

<p>A pretty solid doubling of performance, which is what we would hope.</p>
</div>
	<div id="disqus_thread"></div><script type="text/javascript" src="http://disqus.com/forums/swenson/embed.js"></script><noscript><a href="http://swenson.disqus.com/?url=http://www.caswenson.com/2009_06_13_bypassing_the_python_gil_with_ctypes">View the discussion thread.</a></noscript><a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>
	<div id="sidebar">
  <h2>Modern Cryptanalysis</h2>
	<div><br />
			<center><a href="http://www.amazon.com/gp/product/047013593X?ie=UTF8&tag=mathfigu-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=047013593X"><img border="0" src="images/21tcdykwdkl_aa_sl160_.jpg"></a><img src="http://www.assoc-amazon.com/e/ir?t=mathfigu-20&l=as2&o=1&a=047013593X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></center>
	</div>
	<h2>Pages</h2>
		<ul>
	    <li><a href="about">About</a></li>
	    <li><a href="disclosures">Disclousres</a></li>
	    <li><a href="speaking">Speaking</a></li>
		  <li><a href="presentations">Presentations</a></li>
		  <li><a href="mcerrata"><em>Modern Cryptanalaysis</em> Errata</a></li>
		</ul>
	  <h2><a href="past">Archive</a></h2>
	</div>
	<div id="footer">
	<p id="legal">
	Content by Christopher Swenson (<a href="mailto:chris@caswenson.com">chris@caswenson.com</a>) |
	Design adapted from <a href="http://www.freecsstemplates.org/preview/replenish">Replenish</a>
	</p>
</div>
</body>
</html>
