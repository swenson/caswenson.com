<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<title>When to Start Testing and Why &mdash; Christopher Swenson</title>
	<link href="style.css" rel="stylesheet" type="text/css" />
	<link href="feed" rel="alternate" title="Primary Feed" type="application/atom+xml" />

	<link href="SyntaxHighlighter.css" rel="stylesheet" type="text/css" />
	<script src="js/shCore.js" type="text/javascript"></script>
	<script src="js/shBrushRuby.js" type="text/javascript"></script>
	<script src="js/shBrushPython.js" type="text/javascript"></script>

	<script language="javascript">
	window.onload = function () {
	    dp.SyntaxHighlighter.ClipboardSwf = '/flash/clipboard.swf';
	    dp.SyntaxHighlighter.HighlightAll('code');
	}
	</script>

</head>
<body>
<div id="wrap">

<div id="sidebar">

	<div id="cs">
		<span id="c">
			C
		</span>
		<span id="s">
			S
		</span>
	</div>

	<img id="pic" src="images/purple-top-hat.jpg" alt="purple top hat" />

	<div class="side">
		<ul>
	    <li><a href="about">About</a></li>
			<li>Contact</li>
	    <li><a href="speaking">Speaking</a></li>
			<li>Writing</li>
			<li>Consulting</li>
		</ul>
	</div>

	<hr />

	<div class="side">
		<ul>
			<li><a href="http://github.com/swenson">GitHub</a></li>
			<li><a href="http://twitter.com/chris_swenson">Twitter</a></li>
			<li><a href="https://plus.google.com/+ChristopherSwenson">Google+</a></li>
			<li><a href="http://www.linkedin.com/in/christopherswenson/">LinkedIn</a></li>
		</ul>
	</div>

	<hr />

	<div class="side">
		<ul>
			<li><a href="archive">Blog Archive</a></li>
			<li>Modern Cryptanalysis</li>
			<li><a href="https://artisanalcrypto.com">Artisinal Crypto</a></li>
			<!--<li>Open Source Bounty</li>-->
		</ul>
	</div>
</div>

<div id="main">
	<div class="tagline">computer science, math, programming and other stuff</div>
	<div class="tagline">a blog by Christopher Swenson</div>

	<div class="postzoom"><h1><a href="2013_04_07_when_to_start_testing_and_why">When to Start Testing and Why</a></h1>
<p>I didn't begin to really appreciate the value of proper testing in code until well into my current software engineering career. Testing wasn't something that came up during my formal education in computer science, since it isn't really relevant to the academic pursuit (except for perhaps a course in software engineering, most code you write academically is more about learning or exercising something than creating production code). Now, though, I love testing, and love how it helps ensure stability in my code.</p>

<p>Two questions that come up when I talk to other people, especially relatively new programmers, are when should you learn how to test in a language or environment, and when in your project do you start testing on a given project?</p>

<p>To answer the first question, the best time to learn to test (in my opinion) is after have started to get a good handle on the language and environment you're in, especially if this is the first language you've ever learned. The simple reason for this is that testing is often almost like an entirely new sub-language you have to learn, and it can be a little confusing to dive right into it.</p>

<p>However, you really don't want to put it off for too long, especially if you've never written test code before. Writing good, idiomatic, testable code is an important skill, and living too long in a vacuum of untested code might make it harder to learn to write testable code.</p>

<p>What do I mean when I say "testable code"? Generally, to me, testable code means that you've designed each class or function to be easily tested in isolation. Often, this means making it slightly more explicit than you might naturally write, writing more, smaller functions and extracting out dependencies (such as database connections) so that you can test each small piece.</p>

<p>After all, if your function uses a database connection, you aren't probably too concerned with launching an entire database to test that function and testing that the database writes worked &ndash; you are more interested in validating your logic that is wrapped around it. When you call insert_entry, does it convert values correctly, does it call the appropriate methods that would invoke the database, etc.? In general, you can accomplish testing independent of the database by mocking out the database layer when testing out the checkbook logic.</p>

<p>Going back to our second question, on when do you start testing a given project? I like the philosophy of test-driven development (TDD), where you write the tests before you write the code. This is doubly true if this is code for a client, for your job, or some other code that is meant to be consumed by people other than you, or running any kind logic dealing with other people's data. Furthermore, writing tests first helps you to figure out the architecture of your project a lot better, and to make sure that your architecture is testable from the beginning.</p>

<p>Writing tests before you write every piece of your software is a good way to do practice defensive coding: ensure that every piece of your programs and libraries are extraordinarily well tested before they're even written. As you write more functionality, keep growing those tests as to ensure that everything cooperates well and that nothing new is going to break the old.</p>
</div>
	<div id="disqus_thread"></div><script type="text/javascript" src="http://disqus.com/forums/swenson/embed.js"></script><noscript><a href="http://swenson.disqus.com/?url=http://www.caswenson.com/2013_04_07_when_to_start_testing_and_why">View the discussion thread.</a></noscript><a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>

</div>

<div id="clear"></div>

<div id="footer">
	<p id="legal">
		Copyright 2014 Christopher Swenson
	</p>
</div>

</div>
</body>
</html>
