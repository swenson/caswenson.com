
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<title>Christopher Swenson</title>
	<link href="main.css" rel="stylesheet" type="text/css" />
	<link href="feed" rel="alternate" title="Primary Feed" type="application/atom+xml" />
	<link href="SyntaxHighlighter.css" rel="stylesheet" type="text/css" />

<script src="js/shCore.js" type="text/javascript"></script>
<!--<script src="js/shBrushCSharp.js" type="text/javascript"></script>
<script src="js/shBrushCpp.js" type="text/javascript"></script>
<script src="js/shBrushCss.js" type="text/javascript"></script>
<script src="js/shBrushDelphi.js" type="text/javascript"></script>
<script src="js/shBrushJScript.js" type="text/javascript"></script>
<script src="js/shBrushJava.js" type="text/javascript"></script>
<script src="js/shBrushPhp.js" type="text/javascript"></script>-->
<script src="js/shBrushRuby.js" type="text/javascript"></script>
<script src="js/shBrushPython.js" type="text/javascript"></script>
<!--<script src="js/shBrushSql.js" type="text/javascript"></script>
<script src="js/shBrushVb.js" type="text/javascript"></script>
<script src="js/shBrushXml.js" type="text/javascript"></script>-->

<script language="javascript">
window.onload = function () {
    dp.SyntaxHighlighter.ClipboardSwf = '/flash/clipboard.swf';
    dp.SyntaxHighlighter.HighlightAll('code');
}
</script>

</head>
<body>
<div id="header">
	<div id="logo">
		<img src="images/chrisbluething.png" alt="blue thing" />
		<h1><a href="/">Christopher Swenson</a></h1>
		<p>Computer science, math, programming, and stuff.</p>
	</div>
</div>
<div id="content">
	<div id="postzoom"><h1><a href="2009_09_26_assembly_language_programming_under_os_x_with_nasm">Assembly language programming under OS X with NASM</a></h1>
<p>One of my favorite passions from my teenage days was assembly language programming.  Don't laugh.</p>

<p>It embodies a lot of my favorite things about programming: I have total control, it is clean and simple, and it is just and fast and functional as I am capable of making it.  The only thing standing in the way of me and world domination is how well I can program.</p>

<p>Well, with some minor exceptions.  Having a decent assembler is really key, and for x86 architectures, there are many choices.  If you are hacking a small function together to support some higher-level language, then maybe you can get by using <a href="http://en.wikipedia.org/wiki/Microsoft_Macro_Assembler">MASM</a> (for Windows/DOS), or, if you really hate yourself, <a href="http://en.wikipedia.org/wiki/GNU_Assembler">gas</a> (for every platform).</p>

<p>But, if you intend to spend some time programming in assembly and not hating every minute of it, then you need to use <a href="http://en.wikipedia.org/wiki/Netwide_Assembler">NASM</a>, probably the best assembler for the x86 family, ever (or possibly <a href="http://en.wikipedia.org/wiki/Yasm">Yasm</a>, a NASM clone that I have no experience with).</p>

<p>So, this past week I was interested in playing some more with NASM, and so I thought that I would see how what I could do under OS X (I previously worked primarily in DOS).  Unfortunately, assembly language support in OS X is fairly hampered if you want follow its <a href="http://developer.apple.com/mac/library/DOCUMENTATION/DeveloperTools/Conceptual/LowLevelABI/130-IA-32_Function_Calling_Conventions/IA32.html#//apple_ref/doc/uid/TP40002492-SW4">standard calling conventions</a> for 32-bit x86 code.  The innocuous-looking statement "The stack is 16-byte aligned at the point of function calls" seems innocent, but is a nightmare if you using external calls.</p>

<p>Basically, this means that you have to keep very close track of your stack size when calling functions.  And even worse is that your stack never enters your function correctly aligned: the return address is always 4 bytes long, meaning you are always 12 bytes off when you start.</p>

<p>What this means is that I may have to use a VM with Linux to have any fun with assembly language programming again.</p>

<p>If anyone is interested, here is a quick NASM file I threw together that demonstrates how to use NASM on OS X to call glibc functions.  I tested it with the latest NASM (2.07) on Snow Leopard (you'll probably need XCode installed to get this to work).  This program prints "Hello World", allocates some memory using <code>malloc</code>, uses that memory to write 10 letters of the alphabet on the screen (using <code>printf</code>), <code>free</code>s the memory, and returns.</p>

<pre name="code" class="nasm">
;
; Basic OS X calls to glibc
;
; compile with:
; nasm -g -f macho malloc.asm
; gcc -o a.out malloc.o
;

; glibc stuff
extern _puts, _printf, _malloc, _free

; static data
segment .data

hello_world_str db "Hello world!", 10, 0
int_str db "Address %x", 10, 0

; code
segment .text

global _main

_main:
        push ebp ; setup the frame
        mov  ebp, esp

        sub  esp, 4 ; align the stack
        push dword hello_world_str
        call _puts
        add  esp, 4

        ; malloc 16 bytes
        push  dword 16
        call  _malloc
        add  esp, 4

        ; check if the malloc failed
        test  eax, eax
        jz    fail_exit

        sub   esp, 0xC ; align the stack
        mov   ebx, eax
        push  ebx
        push  dword int_str
        call  _printf
        add   esp, 8
        add   esp, 0xC

        ; print "A\nB\n..."     
        mov   [ebx], dword 0xD41 ; 'A\n'

        mov   edi, 10
        push  ebx
_loop:
        call  _puts
        inc  dword [ebx] 
        dec  edi 
        jnz  _loop

        add  esp, 4

        ; free the malloc'd memory
        push  ebx
        call  _free
        add  esp, 4
        add  esp, 4 ; cleanup the stack 
        pop  ebp
        ret

fail_exit:
        mov  eax, 1
        pop  ebp
        ret
</pre>

<p>The output should look something like this:</p>

<pre>Hello world!

Address 100130
A
B
C
D
E
F
G
H
I
J
</pre>

<p>Am I the only one who likes assembly language programming these days?</p>
</div>
	
	<div id="sidebar">
  <h2>Modern Cryptanalysis</h2>
	<div><br />
			<center><a href="http://www.amazon.com/gp/product/047013593X?ie=UTF8&tag=mathfigu-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=047013593X"><img border="0" src="images/21tcdykwdkl_aa_sl160_.jpg"></a><img src="http://www.assoc-amazon.com/e/ir?t=mathfigu-20&l=as2&o=1&a=047013593X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></center>
	</div>
	<h2>Pages</h2>
		<ul>
	    <li><a href="about">About</a></li>
	    <li><a href="disclosures">Disclousres</a></li>
	    <li><a href="speaking">Speaking</a></li>
		  <li><a href="presentations">Presentations</a></li>
		  <li><a href="mcerrata"><em>Modern Cryptanalaysis</em> Errata</a></li>
		</ul>
	  <h2><a href="past">Archive</a></h2>
	</div>
	<div id="footer">
	<p id="legal">
	Content by Christopher Swenson (<a href="mailto:chris@caswenson.com">chris@caswenson.com</a>) | 
	Design adapted from <a href="http://www.freecsstemplates.org/preview/replenish">Replenish</a>
	</p>
</div>
</body>
</html>