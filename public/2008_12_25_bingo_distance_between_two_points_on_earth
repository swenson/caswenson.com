<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<title>Bingo!  Distance between two points on Earth &mdash; Christopher Swenson</title>
	<link href="style.css" rel="stylesheet" type="text/css" />
	<link href="feed" rel="alternate" title="Primary Feed" type="application/atom+xml" />
	<link href="rss" rel="alternate" title="RSS Feed" type="application/rss+xml" />

	<link href="SyntaxHighlighter.css" rel="stylesheet" type="text/css" />
	<script type="text/x-mathjax-config">
		MathJax.Hub.Config({
		  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
		});
	</script>
	<script type="text/javascript" src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>
	<script src="js/shCore.js" type="text/javascript"></script>
	<script src="js/shBrushRuby.js" type="text/javascript"></script>
	<script src="js/shBrushPython.js" type="text/javascript"></script>

	<script language="javascript">
	window.onload = function () {
	    dp.SyntaxHighlighter.ClipboardSwf = '/flash/clipboard.swf';
	    dp.SyntaxHighlighter.HighlightAll('code');
	}
	</script>

	<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-56218422-1', 'auto');
  ga('send', 'pageview');
	</script>

</head>
<body>
<div id="wrap">

<div id="sidebar">

	<div id="cs">
		<span id="c">
			C
		</span>
		<span id="s">
			S
		</span>
	</div>

	<img id="pic" src="images/purple-top-hat.jpg" alt="purple top hat" />

	<div class="side">
		<ul>
	    <li><a href="about">About</a></li>
			<li><a href="contact">Contact</a></li>
	    <li><a href="speaking">Speaking</a></li>
			<li><a href="http://mathgineering.com">Consulting</a></li>
		</ul>
	</div>

	<hr />

	<div class="side">
		<ul>
			<li><a href="http://github.com/swenson">GitHub</a></li>
			<li><a href="http://twitter.com/chris_swenson">Twitter</a></li>
			<li><a href="https://plus.google.com/+ChristopherSwenson">Google+</a></li>
			<li><a href="http://www.linkedin.com/in/christopherswenson/">LinkedIn</a></li>
		</ul>
	</div>

	<hr />

	<div class="side">
		<ul>
			<li><a href="archive">Blog Archive</a></li>
			<li><a href="mc">Modern Cryptanalysis</a></li>
			<li><a href="https://artisanalcrypto.com">Artisinal Crypto</a></li>
			<!--<li>Open Source Bounty</li>-->
		</ul>
	</div>
</div>

<div id="main">
	<div class="tagline">computer science, math, programming and other stuff</div>
	<div class="tagline">a blog by Christopher Swenson</div>

	<div class="postzoom"><h1><a href="2008_12_25_bingo_distance_between_two_points_on_earth">Bingo!  Distance between two points on Earth</a></h1>
<p>As a follow-up to my previous post, I have found two ways of finding the distance between two cities in the US.  One is slow and more correct, one is less slow and less correct.</p>

<p>First, the slow one.  You can take the third formula from the Wikipedia entry for <a href="http://en.wikipedia.org/wiki/Great-circle_distance#Formulas">finding the great-circle distance</a>.  It translates pretty naturally into any language, but involves many trigonometric functions, squares, square roots, etc.  It's quite ugly an inelegant in code, and quite slow.</p>

<p>In Ruby, it looks something like this (the <code>lat</code> and <code>rlat</code> accessors return the latitude in degrees and radians, respectively, and similarly for longitude with <code>lon</code> and <code>rlon</code>).</p>

<pre name="code" class="ruby">  def distance_miles_slow(other)
    3956.54938 * Math.atan2(Math.sqrt((Math.cos(other.rlat) *
        Math.sin(other.rlon - rlon)) ** 2 +
      (Math.cos(rlat) * Math.sin(other.rlat) - Math.sin(rlat) *
        Math.cos(other.rlat) * Math.cos(other.rlon - rlon)) ** 2),
      (Math.sin(rlat) * Math.sin(other.rlat) + Math.cos(rlat) *
        Math.cos(other.rlat) * Math.cos(other.rlon - rlon)))
  end</pre>

<p>Ugh.</p>

<p>It turns out that my na√Øve method of simply using the Pythagorean theorem after finding the "linear" distance in latitude and longitude (from <a href="http://en.wikipedia.org/wiki/Geographic_coordinate_system#Expressing_latitude_and_longitude_as_linear_units">here</a>) is actually pretty good.  Not as accurate, as the rougher figures seem to be off by about 2% at moderate distances (less than 1,000 miles), which is good enough for me at the moment.</p>

<p>Here's what the Ruby for that look like:</p>

<pre name="code" class="ruby">  def distance_miles_fast(other)
    dlat = lat - other.lat
    drlon = rlon - other.rlon
    Math.sqrt((68.9100652 * dlat)**2 +
      (drlon * 3956.54938 * Math.cos(rlat))**2)
  end</pre>

<p>A little bit better, and at least a bit faster.</p>
</div>
	

</div>

<div id="clear"></div>

<div id="footer">
	<p id="legal">
		Copyright 2014 Christopher Swenson
	</p>
</div>

</div>
</body>
</html>
